// Асинхронный подход

// Чтобы функция стала асинхронной необходимо чтобы она возвращала тип Future, перед фигурной скобкой async
// Можно указать generic для тех данных, которые будет возвращать операция.
// Future<int> getDataFromServer() async {
// Внутри этой функции мы получаем трудоемкой операцией наши данные с сервера
// т.е в течение какого-то времени она получает данные и через какое-то время вернет эти данные в переменную.
// Эта функция должна быть асинхронной, потому что если она будет обычной синхронной, то приложение остановится,
// пока данные будут ломаться, получаться.

// При вызове функци, которая у нас возвращает Future происходят 2 вещи:
// 1 - функция встает в очередь на выполнение и возвращает незавершенный объект Future
// 2 - позже, когда операция завершена, Future завершается со значением или ошибкой

// Перед трудоемкой операцией необходимо поставить ключевое слово await
// var data = await HackingServer();
// }

// Ещё яркий пример синхронной и асинхронной функции
// print('hello'); - 1 напечатаем слово hello
// syncMethod(getImageFromNet()); - 2 начнется выполняться синхронная функция и получим картинку из инета
// print('ok'); - 3 ok не выполнится и всё остановится на синхронной функции

// print('hello'); - 1 напечатаем слово hello
// asyncMethod(getImageFromNet()); - 2 начнется грузиться картинка и тут же напечатается ok, потом на фоне картинка догрузится
// print('ok'); - напечатается сразу после начала выполнения асинхронного метода

void main() {
  performTasks();
  print('Я выполняюсь юхуу');
}

// Асинхронный метод с async await, который будет выполнять наши задачи
Future<void> performTasks() async {
  task1();

  // try {
  //   String task2Result = await task2();
  //   task3(task2Result);
  // } catch (error) {
  //   print(error);
  // }

  // Асинхронный метод с Future API
  task2().then((data) => task3(data)).catchError((error) => print(error));
}

//

void task1() {
  print('task 1 выполнена');
}

// Задача 2 будет асинхронной операцией, не забыть Future<String>
Future<String> task2() async {
  String result;
  // Future.delayed - искуственная задержка, трудоемкая операция, ставим async
  await Future.delayed(Duration(seconds: 3), () {
    // () {} - callback function
    result = 'task 2 data';
    print('task 2 выполнена');
  });
  return result;
}

void task3(String task2Data) {
  print('task 3 выполнена с данными из $task2Data');
}
